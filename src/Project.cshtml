@using System
@using System.Linq
@using System.Collections.Generic
@{
  var packageIconPath = Model.Config.PackageIconPath ?? "../../../../assets/tv-ico.png";
  var licensePath = Model.Config.LicensePath ?? "../../../../LICENSE";
  var xxxVersion = Model.Artifact.NugetVersion.Major + "." + Model.Artifact.NugetVersion.Minor + "." + Model.Artifact.NugetVersion.Patch;
}
<Project Sdk="Xamarin.Legacy.Sdk">
  <PropertyGroup>
    <TargetFrameworks>@(Model.TargetFrameworks)</TargetFrameworks>
    <IsBindingProject>true</IsBindingProject>
    <AssemblyName>@(Model.Artifact.NugetPackageId)</AssemblyName>
    <RootNamespace>@(Model.Artifact.NugetPackageId)</RootNamespace>
  </PropertyGroup>
  <PropertyGroup>
    <PackageId>@(Model.Artifact.NugetPackageId)</PackageId>
    <Title>@(Model.GroupName) - @(Model.ArtifactName)</Title>
    <Summary>C# bindings for @(Model.Artifact.GradleImplementation)</Summary>
    <Description>
        C# bindings for @(Model.Artifact.GradleImplementation)
    </Description>
    <PackageTags> xamarin, @(Model.Tags), @(Model.Artifact.GroupId), @(Model.Artifact.ArtifactId)</PackageTags>
    <Authors>tuyen,tuyen-vuduc</Authors>
    <Owners>tuyen,tuyen-vuduc</Owners>
    <Company>N/A</Company>
    <FileVersion>@(xxxVersion)</FileVersion>
    <InformationalVersion>@(Model.Artifact.NugetVersion + "-" + DateTimeOffset.Now.ToUnixTimeSeconds())</InformationalVersion>
    <AssemblyVersion>@(xxxVersion)</AssemblyVersion>
    <Copyright>Â© tuyen-vuduc. All rights reserved.</Copyright>
    <PackageProjectUrl>@(Model.Config.ProjectUrl)</PackageProjectUrl>
    <RepositoryUrl>https://github.com/tuyen-vuduc/dotnet-binding-utils</RepositoryUrl>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageIcon>package-icon.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageVersion>@(Model.Artifact.NugetVersion)</PackageVersion>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <!-- Include symbol files (*.pdb) in the built .nupkg -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>

  <PropertyGroup>
    <AndroidClassParser>class-parse</AndroidClassParser>
    <AndroidCodegenTarget>XAJavaInterop1</AndroidCodegenTarget>
  </PropertyGroup>
  <ItemGroup>
    <AndroidNamespaceReplacement Include='Com.Mapbox.Maps.Plugin' Replacement='Com.Mapbox.Maps.Plugins' Visible="false" />
    <AndroidNamespaceReplacement Include='Com.Mapbox.Maps.Plugins.Attribution' Replacement='Com.Mapbox.Maps.Plugins.Attributions' Visible="false" />
    <AndroidNamespaceReplacement Include='Com.Mapbox.Maps.Annotation' Replacement='Com.Mapbox.Maps.Annotations' Visible="false" />
    <AndroidNamespaceReplacement Include='Com.Mapbox.Maps.Plugins.Annotation' Replacement='Com.Mapbox.Maps.Plugins.Annotations' Visible="false" />
  </ItemGroup>
  <PropertyGroup>
    <!--
      =================================================================================================================
      CS warnings (from AndroidX)
    -->
    <!--
      No warnings for:
       - CS0618: 'member' is obsolete: 'text'
       - CS0109: The member 'member' does not hide an inherited member. The new keyword is not required
       - CS0114: 'function1' hides inherited member 'function2'. To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
       - CS0628: 'member' : new protected member declared in sealed class
       - CS0108: 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
       - CS0809: Obsolete member 'member' overrides non-obsolete member 'member'
    -->
    <NoWarn>0618;0109;0114;0628;0108;0809</NoWarn>
    <!--
      CS warnings (from AndroidX)
      =================================================================================================================
    -->
    <!--
      =================================================================================================================
      Xamarin.Android Bindings specific warnings
    -->
    <!--
      Ignoreable
      Performance hit for builds
      - BG8A04: <attr path="XPath" /> matched no nodes.
      - BG8A00: <remove-node path="XPath" /> matched no nodes.
    -->
    <NoWarn>08A04;BG8A00;CS0109;CS0108;CS0114</NoWarn>

    <!--
      Harmfull
      - BG8401: Skipping managed_type, due to a duplicate field, method or nested type name. (Nested type) (Java type: java_type)
      - BG8604: top ancestor Type1 not found for nested type Namespace.Type1.Type2
      - BG8C00: For type Namespace.Type1, base interface java.Interface does not exist
      - BG8700: Unknown return type java.Type1 in method Method1 in managed type Namespace.Type2.
      - BG8800: Unknown parameter type java.Type1 in method Method2 in managed type Namespace.Type2.
    -->
    <WarningsAsErrors>BG8401;BG8604;BG8C00;BG8700;BG8800</WarningsAsErrors>
    <!--
      Xamarin.Android specific warnings
      =================================================================================================================
    -->
  </PropertyGroup>
  <PropertyGroup>
    <UserHome Condition=" '$(OS)' == 'Unix' ">$(Home)</UserHome>
    <UserHome Condition=" '$(OS)' != 'Unix' ">$(UserProfile)</UserHome>
  </PropertyGroup>

  <ItemGroup>
  @foreach(var targetFrameworkMoniker in Model.Config.TargetFrameworks) {
    <None Include="@(Model.Artifact.NugetPackageId).targets" Pack="True" PackagePath="build\@(targetFrameworkMoniker)" />
    <None Include="@(Model.Artifact.NugetPackageId).targets" Pack="True" PackagePath="buildTransitive\@(targetFrameworkMoniker)" />
  }    
    <None Include="@(packageIconPath)" Pack="True" PackagePath="package-icon.png" />
    <None Include="@(licensePath)" Pack="True" PackagePath="" />
    <None Include="../../README.md" Pack="True" PackagePath="README.md" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Additions\" />
    <Folder Include="Jars\" />
    <Folder Include="Transforms\" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\..\..\..\src\AssemblyInfo.cs" />
    <Compile Include="..\..\source\@(Model.Artifact.GroupId)\@(Model.Artifact.ArtifactId)\Additions\*.cs">
        <Link>Additions/%(RecursiveDir)/%(Filename)%(Extension)</Link>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <TransformFile Include="..\..\source\@(Model.Artifact.GroupId)\@(Model.Artifact.ArtifactId)\Transforms\*.xml">
        <Link>Transforms/%(RecursiveDir)/%(Filename)%(Extension)</Link>
    </TransformFile>
  </ItemGroup>
  @* <ItemGroup>
  @if (!string.IsNullOrEmpty(Model.Artifact.SourcesJarRelativeFilePath)) {
    <JavaSourceJar
          Include="$(UserHome)/@(Model.Artifact.SourcesJarRelativeFilePath)"
          Condition="Exists('$(UserHome)/@(Model.Artifact.SourcesJarRelativeFilePath)')"
          />
  }
  @if (!string.IsNullOrEmpty(Model.Artifact.JavadocJarRelativeFilePath)) {
    <JavaDocJar
          Include="$(UserHome)/@(Model.Artifact.JavadocJarRelativeFilePath)"
          Condition="Exists('$(UserHome)/@(Model.Artifact.JavadocJarRelativeFilePath)')"
          />
  }
  </ItemGroup> *@
@{
  var homeFolder = Xamarin.Build.Download.Platform.IsWindows
                  ? System.Environment.SpecialFolder.LocalApplicationData
                  : System.Environment.SpecialFolder.Personal;
  var homeFolderPath = System.Environment.GetFolderPath(homeFolder);  
  var proguardFilePath = System.IO.Path.Combine(
    homeFolderPath,
    Model.Artifact.ProguardFileRelativePath
  );
}
  <ItemGroup>
@if (!string.IsNullOrEmpty(Model.Artifact.ProguardFileRelativePath)
  && System.IO.File.Exists(proguardFilePath)) {
    <None Include="@(proguardFilePath)" Pack="True" PackagePath="proguard" />
  }  
  </ItemGroup>

@* <ItemGroup>
  @if (Model.Config.MvnRepositories?.Count > 0) {
    foreach (var kvp in Model.Config.MvnRepositories) {
    <GradleRepository Include="@kvp.Key">
      <Repository>
      @Raw(@kvp.Value)
      </Repository>
    </GradleRepository>
    }
  }
  @if (Model.NuGetDependencies?.Count > 0) {
    foreach (var dep in Model.NuGetDependencies) {
    <GradleImplementation 
      Include="@(dep.GradleImplementation)" />
    }
  }
</ItemGroup> *@

  <ItemGroup>
      @if (Model.Artifact.IsAAR) {
    <InputJar Include="$(UserHome)/@(Model.Artifact.LibFolderPath)/_aar/classes.jar" />
    <!-- For those artifacts with lib/ folder -->
    <InputJar
      Condition="Exists('$(UserHome)/@(Model.Artifact.LibFolderPath)/_aar/libs/')"
      Include="$(UserHome)/@(Model.Artifact.LibFolderPath)/_aar/libs/*.jar"
      />
      } else {
    <InputJar Include="$(UserHome)/@(Model.Artifact.LibRelativePath)" />
      }
  </ItemGroup>
  <ItemGroup>
    @foreach (var dep in @Model.NuGetDependencies) {
      if (!dep.DependencyOnly) {
        <ProjectReference Include="..\..\generated\@(dep.NugetPackageId)\@(dep.NugetPackageId).csproj" PrivateAssets="none" />
      }
    }
  </ItemGroup>
  <ItemGroup>
    @foreach (var dep in @Model.NuGetDependencies) {
      if (dep.DependencyOnly) {
      <PackageReference Include="@(dep.NugetPackageId)" Version="@(dep.NugetVersion.ToNormalizedString())" PrivateAssets="none" />
      }
    }
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Dependencies.Gradle" Version="7.6.0.3" />
    <TransformFile Include="..\..\..\..\src\Metadata.common.xml">
      <Link>Transforms/Metadata.common.xml</Link>
    </TransformFile>
  </ItemGroup>
  <Import Project="$(MSBuildSDKExtrasTargets)" Condition="Exists('$(MSBuildSDKExtrasTargets)')" />
</Project>