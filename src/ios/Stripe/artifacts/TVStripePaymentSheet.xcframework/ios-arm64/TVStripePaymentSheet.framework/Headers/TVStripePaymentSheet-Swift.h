#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef TVSTRIPEPAYMENTSHEET_SWIFT_H
#define TVSTRIPEPAYMENTSHEET_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import PassKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TVStripePaymentSheet",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)



@class STPPaymentMethodAddress;
@class NSString;
@class NSNumber;

/// The customer data collected by <code>AddressViewController</code>
SWIFT_CLASS_NAMED("TSPSAddressDetails")
@interface TSPSAddressDetails : NSObject
/// The customer’s address
@property (nonatomic, readonly, strong) STPPaymentMethodAddress * _Nonnull address;
/// The customer’s full name
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The customer’s phone number, in E.164 format (e.g. “+15551234567”)
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
/// Whether or not the checkbox is enabled.
/// Seealso: <code>AdditionalFieldsConfiguration.checkboxLabel</code>
@property (nonatomic, readonly, strong) NSNumber * _Nullable isCheckboxSelected;
/// Initializes an AddressDetails
- (nonnull instancetype)initWithAddress:(STPPaymentMethodAddress * _Nonnull)address name:(NSString * _Nullable)name phone:(NSString * _Nullable)phone isCheckboxSelected:(NSNumber * _Nullable)isCheckboxSelected OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TSPSAppearanceFont;
@class TSPSAppearanceColors;
@class TSPSAppearancePrimaryButton;
@class TSPSAppearanceShadow;

/// Describes the appearance of PaymentSheet
SWIFT_CLASS_NAMED("TSPSAppearance")
@interface TSPSAppearance : NSObject
/// The default appearance for PaymentSheet
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) TSPSAppearance * _Nonnull default_;)
+ (TSPSAppearance * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>PaymentSheet.Appearance</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Describes the appearance of fonts in PaymentSheet
@property (nonatomic, readonly, strong) TSPSAppearanceFont * _Nonnull font;
/// Describes the colors in PaymentSheet
@property (nonatomic, readonly, strong) TSPSAppearanceColors * _Nonnull colors;
/// Describes the appearance of the primary button (e.g., the “Pay” button)
@property (nonatomic, readonly, strong) TSPSAppearancePrimaryButton * _Nonnull primaryButton;
/// The corner radius used for buttons, inputs, tabs in PaymentSheet
/// note:
/// The behavior of this property is consistent with the behavior of corner radius on <code>CALayer</code>
@property (nonatomic) CGFloat cornerRadius;
/// The border used for inputs and tabs in PaymentSheet
/// note:
/// The behavior of this property is consistent with the behavior of border width on <code>CALayer</code>
@property (nonatomic) CGFloat borderWidth;
/// The shadow used for inputs and tabs in PaymentSheet
/// note:
/// Set this to <code>.disabled</code> to disable shadows
@property (nonatomic, readonly, strong) TSPSAppearanceShadow * _Nonnull shadow;
@end

@class UIColor;

/// Describes the colors in PaymentSheet
SWIFT_CLASS("_TtC20TVStripePaymentSheet20TSPSAppearanceColors")
@interface TSPSAppearanceColors : NSObject
/// Creates a <code>PaymentSheet.Appearance.Colors</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The primary color used throughout PaymentSheet
@property (nonatomic, strong) UIColor * _Nonnull primary;
/// The color used for the background of PaymentSheet
@property (nonatomic, strong) UIColor * _Nonnull background;
/// The color used for the background of inputs, tabs, and other components
@property (nonatomic, strong) UIColor * _Nonnull componentBackground;
/// The border color used for inputs, tabs, and other components
@property (nonatomic, strong) UIColor * _Nonnull componentBorder;
/// The color of the divider lines used inside inputs, tabs, and other components
@property (nonatomic, strong) UIColor * _Nonnull componentDivider;
/// The default text color used in PaymentSheet, appearing over the background color
@property (nonatomic, strong) UIColor * _Nonnull text;
/// The color used for text of secondary importance. For example, this color is used for the label above input fields
@property (nonatomic, strong) UIColor * _Nonnull textSecondary;
/// The color of text appearing over <code>componentBackground</code>
@property (nonatomic, strong) UIColor * _Nonnull componentText;
/// The color used for input placeholder text
@property (nonatomic, strong) UIColor * _Nonnull componentPlaceholderText;
/// The color used for icons in PaymentSheet, such as the close or back icons
@property (nonatomic, strong) UIColor * _Nonnull icon;
/// The color used to indicate errors or destructive actions in PaymentSheet
@property (nonatomic, strong) UIColor * _Nonnull danger;
@end

@class UIFont;

/// Describes the appearance of fonts in PaymentSheet
SWIFT_CLASS("_TtC20TVStripePaymentSheet18TSPSAppearanceFont")
@interface TSPSAppearanceFont : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The scale factor for all font sizes in PaymentSheet.
/// Font sizes are multiplied by this value before being displayed. For example, setting this to 1.2 increases the size of all text by 20%.
/// note:
/// This value must be greater than 0. The default value is 1.0.
/// note:
/// This is used in conjunction with the Dynamic Type accessibility text size.
@property (nonatomic) CGFloat sizeScaleFactor;
/// The font family of this font is used throughout PaymentSheet. PaymentSheet uses this font at multiple weights (e.g., regular, medium, semibold) if they exist.
/// note:
/// The size and weight of the font is ignored. To adjust font sizes, see <code>sizeScaleFactor</code>.
@property (nonatomic, strong) UIFont * _Nonnull base;
@end


/// Describes the appearance of the primary button (e.g., the “Pay” button)
SWIFT_CLASS("_TtC20TVStripePaymentSheet27TSPSAppearancePrimaryButton")
@interface TSPSAppearancePrimaryButton : NSObject
/// Creates a <code>PaymentSheet.Appearance.PrimaryButton</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The background color of the primary button
/// note:
/// If <code>nil</code>, <code>appearance.colors.primary</code> will be used as the primary button background color
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The text color of the primary button
/// note:
/// If <code>nil</code>, defaults to either white or black depending on the color of the button
@property (nonatomic, strong) UIColor * _Nullable textColor;
/// The background color of the primary button when in a success state.
/// note:
/// Only applies to PaymentSheet. The primary button transitions to the success state when payment succeeds.
@property (nonatomic, strong) UIColor * _Nonnull successBackgroundColor;
/// The text color of the primary button when in a success state.
/// note:
/// Only applies to PaymentSheet. The primary button transitions to the success state when payment succeeds.
/// note:
/// If <code>nil</code>, defaults to <code>textColor</code>
@property (nonatomic, strong) UIColor * _Nullable successTextColor;
/// The corner radius of the primary button
/// note:
/// If <code>nil</code>, <code>appearance.cornerRadius</code> will be used as the primary button corner radius
/// note:
/// The behavior of this property is consistent with the behavior of corner radius on <code>CALayer</code>
@property (nonatomic, strong) NSNumber * _Nullable cornerRadius;
/// The border color of the primary button
/// note:
/// The behavior of this property is consistent with the behavior of border color on <code>CALayer</code>
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// The border width of the primary button
/// note:
/// The behavior of this property is consistent with the behavior of border width on <code>CALayer</code>
@property (nonatomic) CGFloat borderWidth;
/// The font used for the text of the primary button
/// note:
/// If <code>nil</code>, <code>appearance.font.base</code> will be used as the primary button font
/// note:
/// <code>appearance.font.sizeScaleFactor</code> does not impact the size of this font
@property (nonatomic, strong) UIFont * _Nullable font;
/// The shadow of the primary button
/// note:
/// If <code>nil</code>, <code>appearance.shadow</code> will be used as the primary button shadow
@property (nonatomic, readonly, strong) TSPSAppearanceShadow * _Nonnull shadow;
- (void)removeShadow;
@end


/// Represents a shadow in PaymentSheet
SWIFT_CLASS("_TtC20TVStripePaymentSheet20TSPSAppearanceShadow")
@interface TSPSAppearanceShadow : NSObject
/// Creates a <code>PaymentSheet.Appearance.Shadow</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PKPaymentSummaryItem;
@class TSPSApplePayConfigurationHandlers;

/// Configuration related to Apple Pay
SWIFT_CLASS_NAMED("TSPSApplePayConfiguration")
@interface TSPSApplePayConfiguration : NSObject
/// The Apple Merchant Identifier to use during Apple Pay transactions.
/// To obtain one, see https://stripe.com/docs/apple-pay#native
@property (nonatomic, readonly, copy) NSString * _Nonnull merchantId;
/// The two-letter ISO 3166 code of the country of your business, e.g. “US”
/// See your account’s country value here https://dashboard.stripe.com/settings/account
@property (nonatomic, readonly, copy) NSString * _Nonnull merchantCountryCode;
/// Defines the label that will be displayed in the Apple Pay button.
/// See <a href="https://developer.apple.com/design/human-interface-guidelines/technologies/apple-pay/buttons-and-marks/">https://developer.apple.com/design/human-interface-guidelines/technologies/apple-pay/buttons-and-marks/</a>
/// for all available options.
@property (nonatomic, readonly) PKPaymentButtonType buttonType;
/// An array of payment summary item objects that summarize the amount of the payment. This property is identical to <code>PKPaymentRequest.paymentSummaryItems</code>.
/// If <code>nil</code>, we display a single line item with the amount on the PaymentIntent or “Amount pending” for SetupIntents.
/// If you’re using a SetupIntent for a recurring payment, you should set this to display the amount you intend to charge, in accordance with https://developer.apple.com/design/human-interface-guidelines/technologies/apple-pay/subscriptions-and-donations
/// Follow Apple’s documentation to set this property: https://developer.apple.com/documentation/passkit/pkpaymentrequest/1619231-paymentsummaryitems
@property (nonatomic, readonly, copy) NSArray<PKPaymentSummaryItem *> * _Nullable paymentSummaryItems;
/// Optional handler blocks for Apple Pay
@property (nonatomic, readonly, strong) TSPSApplePayConfigurationHandlers * _Nullable customHandlers;
/// Initializes a ApplePayConfiguration
- (nonnull instancetype)initWithMerchantId:(NSString * _Nonnull)merchantId merchantCountryCode:(NSString * _Nonnull)merchantCountryCode buttonType:(PKPaymentButtonType)buttonType paymentSummaryItems:(NSArray<PKPaymentSummaryItem *> * _Nullable)paymentSummaryItems customHandlers:(TSPSApplePayConfigurationHandlers * _Nullable)customHandlers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PKPaymentRequest;
@class PKPaymentAuthorizationResult;

/// Custom handler blocks for Apple Pay
SWIFT_CLASS_NAMED("TSPSApplePayConfigurationHandlers")
@interface TSPSApplePayConfigurationHandlers : NSObject
/// Optionally configure additional information on your PKPaymentRequest.
/// This closure will be called after the PKPaymentRequest is created, but before the Apple Pay sheet is presented.
/// In your implementation, you can configure the PKPaymentRequest to add custom fields, such as <code>recurringPaymentRequest</code>.
/// See https://developer.apple.com/documentation/passkit/pkpaymentrequest for all configuration options.
/// <ul>
///   <li>
///     Parameter: The PKPaymentRequest created by PaymentSheet.
///   </li>
///   <li>
///     Return: The PKPaymentRequest after your modifications.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) PKPaymentRequest * _Nonnull (^ _Nullable paymentRequestHandler)(PKPaymentRequest * _Nonnull);
/// Optionally configure additional information on your PKPaymentAuthorizationResult.
/// This closure will be called after the PaymentIntent or SetupIntent is confirmed, but before
/// the Apple Pay sheet has been closed.
/// In your implementation, you can configure the PKPaymentAuthorizationResult to add custom fields, such as <code>orderDetails</code>.
/// See https://developer.apple.com/documentation/passkit/pkpaymentauthorizationresult for all configuration options.
/// \code
/// .authorizationResultHandler = { result, completion in
///     result.orderDetails = PKPaymentOrderDetails(/* ... */)
///     completion(result)
/// }
///
/// \endcodeWARNING: If you do not call the completion handler, your app will hang until the Apple Pay sheet times out.
/// \param $0 The PKPaymentAuthorizationResult created by PaymentSheet.
///
/// \param $1 A completion handler. You must call this handler with the PKPaymentAuthorizationResult on the main queue
/// after applying your modifications.
/// For example:
///
@property (nonatomic, readonly, copy) void (^ _Nullable authorizationResultHandler)(PKPaymentAuthorizationResult * _Nonnull, void (^ _Nonnull)(PKPaymentAuthorizationResult * _Nonnull));
/// Initializes the ApplePayConfiguration Handlers.
- (nonnull instancetype)initWithPaymentRequestHandler:(PKPaymentRequest * _Nonnull (^ _Nullable)(PKPaymentRequest * _Nonnull))paymentRequestHandler authorizationResultHandler:(void (^ _Nullable)(PKPaymentAuthorizationResult * _Nonnull, void (^ _Nonnull)(PKPaymentAuthorizationResult * _Nonnull)))authorizationResultHandler OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TSPSBillingDetailsCollectionConfigurationCollectionMode : NSInteger;
enum TSPSBillingDetailsCollectionConfigurationAddressCollectionMode : NSInteger;

/// Configuration for how billing details are collected during checkout.
SWIFT_CLASS_NAMED("TSPSBillingDetailsCollectionConfiguration")
@interface TSPSBillingDetailsCollectionConfiguration : NSObject
/// How to collect the name field.
/// Defaults to <code>automatic</code>.
@property (nonatomic) enum TSPSBillingDetailsCollectionConfigurationCollectionMode name;
/// How to collect the phone field.
/// Defaults to <code>automatic</code>.
@property (nonatomic) enum TSPSBillingDetailsCollectionConfigurationCollectionMode phone;
/// How to collect the email field.
/// Defaults to <code>automatic</code>.
@property (nonatomic) enum TSPSBillingDetailsCollectionConfigurationCollectionMode email;
/// How to collect the billing address.
/// Defaults to <code>automatic</code>.
@property (nonatomic) enum TSPSBillingDetailsCollectionConfigurationAddressCollectionMode address;
/// Whether the values included in <code>Configuration.defaultBillingDetails</code> should be attached to the payment
/// method, this includes fields that aren’t displayed in the form.
/// If <code>false</code> (the default), those values will only be used to prefill the corresponding fields in the form.
@property (nonatomic) BOOL attachDefaultsToPaymentMethod;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Billing address collection options.
typedef SWIFT_ENUM(NSInteger, TSPSBillingDetailsCollectionConfigurationAddressCollectionMode, open) {
/// Only the fields required by the Payment Method will be collected, this may be none.
  TSPSBillingDetailsCollectionConfigurationAddressCollectionModeAutomatic = 0,
/// Address will never be collected.
/// If the Payment Method requires a billing address, you must provide it as part of
/// <code>defaultBillingDetails</code>.
  TSPSBillingDetailsCollectionConfigurationAddressCollectionModeNever = 1,
/// Collect the full billing address, regardless of the Payment Method requirements.
  TSPSBillingDetailsCollectionConfigurationAddressCollectionModeFull = 2,
};

/// Billing details fields collection options.
typedef SWIFT_ENUM(NSInteger, TSPSBillingDetailsCollectionConfigurationCollectionMode, open) {
/// The field will be collected depending on the Payment Method’s requirements.
  TSPSBillingDetailsCollectionConfigurationCollectionModeAutomatic = 0,
/// The field will never be collected.
/// If this field is required by the Payment Method, you must provide it as part of <code>defaultBillingDetails</code>.
  TSPSBillingDetailsCollectionConfigurationCollectionModeNever = 1,
/// The field will always be collected, even if it isn’t required for the Payment Method.
  TSPSBillingDetailsCollectionConfigurationCollectionModeAlways = 2,
};

@class STPAPIClient;
enum TSPSUserInterfaceStyle : NSInteger;
@class TSPSCustomerConfiguration;
@class STPPaymentMethodBillingDetails;
enum TSPSSavePaymentMethodOptInBehavior : NSInteger;
@class TSPSExternalPaymentMethodConfiguration;

/// Configuration for PaymentSheet
SWIFT_CLASS_NAMED("TSPSConfiguration")
@interface TSPSConfiguration : NSObject
/// If true, allows payment methods that do not move money at the end of the checkout. Defaults to false.
/// seealso:
/// https://stripe.com/docs/payments/payment-methods#payment-notification
/// <ul>
///   <li>
///     Description: Some payment methods can’t guarantee you will receive funds from your customer at the end of the checkout because they take time to settle (eg. most bank debits, like SEPA or ACH) or require customer action to complete (e.g. OXXO, Konbini, Boleto). If this is set to true, make sure your integration listens to webhooks for notifications on whether a payment has succeeded or not.
///   </li>
/// </ul>
@property (nonatomic) BOOL allowsDelayedPaymentMethods;
/// If <code>true</code>, allows payment methods that require a shipping address, like Afterpay and Affirm. Defaults to <code>false</code>.
/// Set this to <code>true</code> if you collect shipping addresses and set <code>Configuration.shippingDetails</code> or set <code>shipping</code> details directly on the PaymentIntent.
/// note:
/// PaymentSheet considers this property <code>true</code> and allows payment methods that require a shipping address if <code>shipping</code> details are present on the PaymentIntent when PaymentSheet loads.
@property (nonatomic) BOOL allowsPaymentMethodsRequiringShippingAddress;
/// The APIClient instance used to make requests to Stripe
@property (nonatomic, strong) STPAPIClient * _Nonnull apiClient;
/// Configuration related to Apple Pay
/// If set, PaymentSheet displays Apple Pay as a payment option
@property (nonatomic, strong) TSPSApplePayConfiguration * _Nullable applePay;
/// The color of the Buy or Add button. Defaults to <code>.systemBlue</code> when <code>nil</code>.
@property (nonatomic, strong) UIColor * _Nullable primaryButtonColor;
/// The label to use for the primary button.
/// If not set, Payment Sheet will display suitable default labels
/// for payment and setup intents.
@property (nonatomic, copy) NSString * _Nullable primaryButtonLabel;
/// The color styling to use for PaymentSheet UI
/// Default value is SheetStyle.automatic
/// @see SheetStyle
@property (nonatomic) enum TSPSUserInterfaceStyle style;
/// Configuration related to the Stripe Customer
/// If set, the customer can select a previously saved payment method within PaymentSheet
@property (nonatomic, strong) TSPSCustomerConfiguration * _Nullable customer;
/// Your customer-facing business name.
/// The default value is the name of your app, using CFBundleDisplayName or CFBundleName
@property (nonatomic, copy) NSString * _Nullable merchantDisplayName;
/// A URL that redirects back to your app that PaymentSheet can use to auto-dismiss
/// web views used for additional authentication, e.g. 3DS2
@property (nonatomic, copy) NSString * _Nullable returnURL;
/// PaymentSheet pre-populates fields with the values provided.
/// If <code>billingDetailsCollectionConfiguration.attachDefaultsToPaymentMethod</code> is <code>true</code>, these values will
/// be attached to the payment method even if they are not collected by the PaymentSheet UI.
@property (nonatomic, strong) STPPaymentMethodBillingDetails * _Nullable defaultBillingDetails;
/// PaymentSheet offers users an option to save some payment methods for later use.
/// Default value is .automatic
/// @see SavePaymentMethodOptInBehavior
@property (nonatomic) enum TSPSSavePaymentMethodOptInBehavior savePaymentMethodOptInBehavior;
/// Describes the appearance of PaymentSheet
@property (nonatomic, strong) TSPSAppearance * _Nullable appearance;
/// A closure that returns the customer’s shipping details.
/// This is used to display a “Billing address is same as shipping” checkbox if <code>defaultBillingDetails</code> is not provided
/// If <code>name</code> and <code>line1</code> are populated, it’s also <a href="https://stripe.com/docs/api/payment_intents/object#payment_intent_object-shipping">attached to the PaymentIntent</a> during payment.
@property (nonatomic, copy) TSPSAddressDetails * _Nullable (^ _Nonnull shippingDetails)(void);
/// The list of preferred networks that should be used to process payments made with a co-branded card.
/// This value will only be used if your user hasn’t selected a network themselves.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable preferredNetworks;
/// Initializes a Configuration with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Describes how billing details should be collected.
/// All values default to <code>automatic</code>.
/// If <code>never</code> is used for a required field for the Payment Method used during checkout,
/// you <em>must</em> provide an appropriate value as part of <code>defaultBillingDetails</code>.
@property (nonatomic, strong) TSPSBillingDetailsCollectionConfiguration * _Nullable billingDetailsCollectionConfiguration;
/// Optional configuration to display a custom message when a saved payment method is removed.
@property (nonatomic, copy) NSString * _Nullable removeSavedPaymentMethodMessage;
/// Configuration for external payment methods.
@property (nonatomic, strong) TSPSExternalPaymentMethodConfiguration * _Nullable externalPaymentMethodConfiguration;
/// By default, PaymentSheet will use a dynamic ordering that optimizes payment method display for the customer.
/// You can override the default order in which payment methods are displayed in PaymentSheet with a list of payment method types.
/// See https://stripe.com/docs/api/payment_methods/object#payment_method_object-type for the list of valid types.  You may also pass external payment methods.
/// note:
/// If you omit payment methods from this list, they’ll be automatically ordered by Stripe after the ones you provide. Invalid payment methods are ignored.
/// <ul>
///   <li>
///     Example: [“card”, “external_paypal”, “klarna”]
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nullable paymentMethodOrder;
@end


/// Configuration related to the Stripe Customer
SWIFT_CLASS_NAMED("TSPSCustomerConfiguration")
@interface TSPSCustomerConfiguration : NSObject
/// The identifier of the Stripe Customer object.
/// See https://stripe.com/docs/api/customers/object#customer_object-id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// A short-lived token that allows the SDK to access a Customer’s payment methods
@property (nonatomic, readonly, copy) NSString * _Nonnull ephemeralKeySecret;
/// Initializes a CustomerConfiguration with an ephemeralKeySecret
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id ephemeralKeySecret:(NSString * _Nonnull)ephemeralKeySecret OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum TSPSPaymentSheetResult : NSInteger;

/// Configuration for external payment methods
/// seealso:
/// See the <a href="https://stripe.com/docs/payments/external-payment-methods?platform=ios">integration guide</a>.
SWIFT_CLASS_NAMED("TSPSExternalPaymentMethodConfiguration")
@interface TSPSExternalPaymentMethodConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes an <code>ExternalPaymentMethodConfiguration</code>
/// seealso:
/// See the <a href="https://stripe.com/docs/payments/external-payment-methods?platform=ios">integration guide</a>.
/// \param externalPaymentMethods A list of external payment methods to display in PaymentSheet e.g., [“external_paypal”].
///
/// \param externalPaymentMethodConfirmHandler A handler called when the customer confirms the payment using an external payment method.
///
- (nonnull instancetype)initWithExternalPaymentMethods:(NSArray<NSString *> * _Nonnull)externalPaymentMethods externalPaymentMethodConfirmHandler:(void (^ _Nonnull)(NSString * _Nonnull, STPPaymentMethodBillingDetails * _Nonnull, void (^ _Nonnull)(enum TSPSPaymentSheetResult, NSError * _Nullable)))externalPaymentMethodConfirmHandler;
/// A list of external payment methods to display in PaymentSheet.
/// e.g. [“external_paypal”].
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull externalPaymentMethods;
/// This handler is called when the customer confirms the payment using an external payment method.
/// Your implementation should complete the payment and call the <code>completion</code> parameter with the result.
/// note:
/// This is always called on the main thread.
@property (nonatomic, copy) void (^ _Nonnull externalPaymentMethodConfirmHandler)(NSString * _Nonnull, STPPaymentMethodBillingDetails * _Nonnull, void (^ _Nonnull)(enum TSPSPaymentSheetResult, NSError * _Nullable));
@end

typedef SWIFT_ENUM(NSInteger, TSPSInitializationMode, open) {
  TSPSInitializationModePaymentIntentClientSecret = 0,
  TSPSInitializationModeSetupIntentClientSecret = 1,
  TSPSInitializationModeDeferredIntent = 2,
};

@class UIViewController;

SWIFT_CLASS_NAMED("TSPSPaymentSheet")
@interface TSPSPaymentSheet : NSObject
/// Initializes a PaymentSheet
/// note:
/// This can be used to complete a payment - don’t log it, store it, or expose it to anyone other than the customer.
/// \param paymentIntentClientSecret The <a href="https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret">client secret</a> of a Stripe PaymentIntent object
///
/// \param configuration Configuration for the PaymentSheet. e.g. your business name, Customer details, etc.
///
- (nonnull instancetype)initWithPaymentIntentClientSecret:(NSString * _Nonnull)paymentIntentClientSecret configuration:(TSPSConfiguration * _Nonnull)configuration;
/// Initializes a PaymentSheet
/// \param setupIntentClientSecret The <a href="https://stripe.com/docs/api/setup_intents/object#setup_intent_object-client_secret">client secret</a> of a Stripe SetupIntent object
///
/// \param configuration Configuration for the PaymentSheet. e.g. your business name, Customer details, etc.
///
- (nonnull instancetype)initWithSetupIntentClientSecret:(NSString * _Nonnull)setupIntentClientSecret configuration:(TSPSConfiguration * _Nonnull)configuration;
+ (void)resetCustomer;
/// Presents a sheet for a customer to complete their payment
/// \param presentingViewController The view controller to present a payment sheet
///
/// \param completion Called with the result of the payment after the payment sheet is dismissed.
///
- (void)presentFrom:(UIViewController * _Nonnull)presentingViewController completion:(void (^ _Nonnull)(enum TSPSPaymentSheetResult, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The result of an attempt to confirm a PaymentIntent or SetupIntent
typedef SWIFT_ENUM(NSInteger, TSPSPaymentSheetResult, open) {
/// The customer completed the payment or setup
/// note:
/// The payment may still be processing at this point; don’t assume money has successfully moved.
/// Your app should transition to a generic receipt view (e.g. a screen that displays “Your order is confirmed!”), and
/// fulfill the order (e.g. ship the product to the customer) after receiving a successful payment event from Stripe -
/// see https://stripe.com/docs/payments/handling-payment-events
  TSPSPaymentSheetResultCompleted = 0,
/// The customer canceled the payment or setup attempt
  TSPSPaymentSheetResultCanceled = 1,
/// An error occurred.
/// note:
/// <code>PaymentSheet</code> returns this only when an unrecoverable error is encountered (e.g. if PaymentSheet fails to load). In other cases, the error is shown directly to the user in the sheet (e.g. if payment failed).
/// <code>PaymentSheet.FlowController</code> returns this whenever an error is encountered.
/// \param error The error encountered by the customer. You can display its <code>localizedDescription</code> to the customer.
///
  TSPSPaymentSheetResultFailed = 2,
};

/// Options for the default state of save payment method controls
/// @note Some jurisdictions may have rules governing the ability to default to opt-out behaviors
typedef SWIFT_ENUM_NAMED(NSInteger, TSPSSavePaymentMethodOptInBehavior, "TSPSSavePaymentMethodOptInBehavior", open) {
/// (Default) The SDK will apply opt-out behavior for supported countries.
/// Currently, we use requiresOptIn for all countries.
  TSPSSavePaymentMethodOptInBehaviorAutomatic = 0,
/// The control will always default to unselected and users
/// will have to explicitly interact to save their payment method
  TSPSSavePaymentMethodOptInBehaviorRequiresOptIn = 1,
/// The control will always default to selected and users
/// will have to explicitly interact to not save their payment method
  TSPSSavePaymentMethodOptInBehaviorRequiresOptOut = 2,
};

/// Style options for colors in PaymentSheet
typedef SWIFT_ENUM(NSInteger, TSPSUserInterfaceStyle, open) {
/// (default) PaymentSheet will automatically switch between standard and dark mode compatible colors based on device settings
  TSPSUserInterfaceStyleAutomatic = 0,
/// PaymentSheet will always use colors appropriate for standard, i.e. non-dark mode UI
  TSPSUserInterfaceStyleAlwaysLight = 1,
/// PaymentSheet will always use colors appropriate for dark mode UI
  TSPSUserInterfaceStyleAlwaysDark = 2,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
