name: Publish Helper Library
run-name: ${{ github.actor }} is publishing NuGet ðŸš€

on:
  workflow_dispatch:
    inputs:
      SHOULD_RUN:
        description: 'True to run'
        required: true
        type: boolean

jobs:
  build-then-publish:
    environment: production
    runs-on: macos-latest
    timeout-minutes: 30
    if: ${{ inputs.SHOULD_RUN }} 
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-helper-${{ hashFiles('**/*.csproj', '**/*.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-helper-
            ${{ runner.os }}-nuget-
      
      - name: Setup .NET Core SDK 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0'

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Build with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 2
          retry_on: error
          command: sh build.sh

      - name: Validate NuGet packages
        run: |
          if [ ! -d "nugets" ] || [ -z "$(ls -A nugets 2>/dev/null)" ]; then
            echo "Error: No NuGet packages found in nugets directory"
            exit 1
          fi
          
          echo "Found NuGet packages:"
          ls -la nugets/
        shell: bash

      - name: Publish NuGet and symbols
        id: nuget-push
        uses: edumserrano/nuget-push@v1.2.2
        with:
          api-key: '${{ secrets.NUGET_PUSH_API_KEY }}'
          working-directory: 'nugets'

      - name: Log NuGet push results
        if: steps.nuget-push.conclusion != 'skipped' && always()
        shell: pwsh
        run: |
          try {
            $pushResult = '${{ steps.nuget-push.outputs.push-result }}' | ConvertFrom-Json
            $pushResultAsJsonIndented = ConvertTo-Json $pushResult -Depth 10
            Write-Output "=== Helper Library NuGet Push Results ==="
            Write-Output $pushResultAsJsonIndented
            Write-Output "=== Overall Status: ${{ steps.nuget-push.outputs.status }} ==="

            foreach($package in $pushResult.packages) {
                Write-Output "Package: $($package.package)"
                Write-Output "Status: $($package.status)"
                Write-Output "Symbols: $($package.symbols)"
                Write-Output "---"
            }
          }
          catch {
            Write-Output "Error parsing NuGet push results: $_"
            Write-Output "Raw output: ${{ steps.nuget-push.outputs.push-result }}"
          }

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: helper-build-logs-${{ github.run_id }}
          path: |
            *.log
            src/**/*.log
            **/*.binlog
          retention-days: 7
        continue-on-error: true

      - name: Generate build summary
        if: always()
        run: |
          echo "## Helper Library Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner**: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "nugets" ]; then
            echo "- **Packages Created**:" >> $GITHUB_STEP_SUMMARY
            for package in nugets/*.nupkg; do
              if [ -f "$package" ]; then
                package_name=$(basename "$package")
                echo "  - $package_name" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
        shell: bash